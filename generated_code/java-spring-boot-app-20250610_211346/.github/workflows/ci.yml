name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '21'
  MAVEN_VERSION: '3.9.6'
  POSTGRESQL_VERSION: '16'
  DOCKER_REGISTRY: ghcr.io
  APP_NAME: ekyc-verification-service

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:${{ env.POSTGRESQL_VERSION }}
        env:
          POSTGRES_DB: ekyc_verification_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run Tests & Build
      run: |
        mvn clean verify -B -Dspring.profiles.active=test
      env:
        SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/ekyc_verification_test
        SPRING_DATASOURCE_USERNAME: test_user
        SPRING_DATASOURCE_PASSWORD: test_password

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: target/surefire-reports/

    - name: Upload Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: target/site/jacoco/

    - name: SonarCloud Analysis
      if: github.event_name != 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn sonar:sonar \
          -Dsonar.organization=your-org \
          -Dsonar.projectKey=ekyc-verification-service \
          -Dsonar.host.url=https://sonarcloud.io

    - name: Build Docker Image
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        docker build -t ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}:${{ github.sha }} \
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}:latest

    - name: Login to GitHub Container Registry
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker Image
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      run: |
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}:${{ github.sha }}
        docker push ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.APP_NAME }}:latest

  security-scan:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'eKYC Verification Service'
        path: '.'
        format: 'HTML'
        args: >
          --failOnCVSS 7
          --suppressionFile ./.dependency-check-suppressions.xml

    - name: Upload Security Scan Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: dependency-check-report.html

  deploy-staging:
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Deploy to Staging
      run: |
        echo "Deploying to staging environment"
        # Add actual deployment steps here

  deploy-production:
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Deploy to Production
      run: |
        echo "Deploying to production environment"
        # Add actual deployment steps here

  cleanup:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Cleanup Old Images
      run: |
        echo "Cleaning up old images and artifacts"
        # Add cleanup steps here